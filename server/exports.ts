import { EstimationResult } from "@shared/schema";
import { formatEstimationResults } from "./estimator";

/**
 * Export utilities for generating CSV, PDF, and JSON formats
 * Implements the export requirements from SR8
 */

export interface ExportOptions {
  projectName: string;
  location?: string;
  estimatorName?: string;
  date?: Date;
}

/**
 * Generate CSV export data for BoM
 */
// CSV sanitization helper
function sanitizeCsvField(field: string): string {
  if (!field) return "";
  const str = String(field);
  // Prefix dangerous characters to prevent formula injection
  if (str.startsWith('=') || str.startsWith('+') || str.startsWith('-') || str.startsWith('@')) {
    return `"'${str}"`;
  }
  // Escape quotes and wrap in quotes if contains comma or quote
  if (str.includes(',') || str.includes('"') || str.includes('\n')) {
    return `"${str.replace(/"/g, '""')}"`;
  }
  return str;
}

export function generateCSVExport(
  results: EstimationResult,
  options: ExportOptions
): string {
  const formatted = formatEstimationResults(results);
  const date = options.date || new Date();
  
  const csvLines = [
    "Construction Material Estimate - Bill of Materials",
    `Project: ${sanitizeCsvField(options.projectName)}`,
    `Location: ${sanitizeCsvField(options.location || "N/A")}`,
    `Estimator: ${sanitizeCsvField(options.estimatorName || "ConstructAI")}`,
    `Date: ${date.toLocaleDateString()}`,
    `Mix Ratio: ${formatted.parameters.mixRatio}`,
    `Dry Factor: ${formatted.parameters.dryFactor}`,
    `Wastage Factor: ${formatted.parameters.wastageFactor}`,
    "",
    "Material,Volume (m³),Mass (kg),Units,Cost Estimate",
    `Portland Cement,${results.cement.volume},${results.cement.mass},${results.cement.bags} bags (50kg),$${(results.cement.bags! * 10).toFixed(2)}`,
    `Fine Sand,${results.sand.volume},${results.sand.mass},${results.sand.tonnes} tonnes,$${(results.sand.tonnes * 50).toFixed(2)}`,
    `Coarse Aggregate,${results.aggregate.volume},${results.aggregate.mass},${results.aggregate.tonnes} tonnes,$${(results.aggregate.tonnes * 35).toFixed(2)}`,
    "",
    `Total Volume,${results.totals.volume} m³,,,`,
    `Total Mass,${results.totals.mass} kg,,,`,
    `Total Estimated Cost,,,,$${results.totals.estimatedCost.toFixed(2)}`,
    "",
    "Generated by ConstructAI Material Estimator",
    `Report ID: EST-${Date.now()}`,
  ];
  
  return csvLines.join("\n");
}

/**
 * Generate JSON export data for API consumption
 */
export function generateJSONExport(
  results: EstimationResult,
  options: ExportOptions
): object {
  return {
    metadata: {
      projectName: options.projectName,
      location: options.location,
      estimatorName: options.estimatorName || "ConstructAI",
      generatedAt: options.date || new Date(),
      reportId: `EST-${Date.now()}`,
      version: "1.0",
    },
    parameters: {
      volume: results.parameters.volumeM3,
      mixRatio: results.parameters.mixRatio,
      densities: results.parameters.densities,
      dryFactor: results.parameters.dryFactor,
      wastageFactor: results.parameters.wastageFactor,
    },
    materials: {
      cement: {
        name: "Portland Cement",
        type: "cement",
        volume: {
          value: results.cement.volume,
          unit: "m³"
        },
        mass: {
          value: results.cement.mass,
          unit: "kg"
        },
        bags: {
          value: results.cement.bags,
          unit: "bags (50kg)"
        },
        tonnes: {
          value: results.cement.tonnes,
          unit: "tonnes"
        },
        estimatedCost: {
          value: results.cement.bags! * 10,
          currency: "USD"
        }
      },
      sand: {
        name: "Fine Sand",
        type: "sand",
        volume: {
          value: results.sand.volume,
          unit: "m³"
        },
        mass: {
          value: results.sand.mass,
          unit: "kg"
        },
        tonnes: {
          value: results.sand.tonnes,
          unit: "tonnes"
        },
        estimatedCost: {
          value: results.sand.tonnes * 50,
          currency: "USD"
        }
      },
      aggregate: {
        name: "Coarse Aggregate",
        type: "aggregate",
        volume: {
          value: results.aggregate.volume,
          unit: "m³"
        },
        mass: {
          value: results.aggregate.mass,
          unit: "kg"
        },
        tonnes: {
          value: results.aggregate.tonnes,
          unit: "tonnes"
        },
        estimatedCost: {
          value: results.aggregate.tonnes * 35,
          currency: "USD"
        }
      }
    },
    totals: {
      volume: {
        value: results.totals.volume,
        unit: "m³"
      },
      mass: {
        value: results.totals.mass,
        unit: "kg"
      },
      estimatedCost: {
        value: results.totals.estimatedCost,
        currency: "USD"
      }
    }
  };
}

/**
 * Generate HTML content for PDF export (to be used with headless Chrome)
 */
// HTML escaping helper
function escapeHtml(text: string): string {
  if (!text) return "";
  const str = String(text);
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

export function generatePDFHTML(
  results: EstimationResult,
  options: ExportOptions
): string {
  const formatted = formatEstimationResults(results);
  const date = (options.date || new Date()).toLocaleDateString();
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>Construction Material Estimate</title>
      <style>
        body { 
          font-family: Arial, sans-serif; 
          max-width: 800px; 
          margin: 0 auto; 
          padding: 20px;
          line-height: 1.4;
        }
        .header { 
          text-align: center; 
          border-bottom: 2px solid #2563eb; 
          padding-bottom: 20px; 
          margin-bottom: 30px; 
        }
        .project-info { 
          display: grid; 
          grid-template-columns: 1fr 1fr; 
          gap: 20px; 
          margin-bottom: 30px; 
        }
        .info-card { 
          background: #f8fafc; 
          padding: 15px; 
          border-radius: 8px; 
        }
        table { 
          width: 100%; 
          border-collapse: collapse; 
          margin: 20px 0; 
        }
        th, td { 
          border: 1px solid #e2e8f0; 
          padding: 12px; 
          text-align: left; 
        }
        th { 
          background: #2563eb; 
          color: white; 
        }
        .total-row { 
          background: #f1f5f9; 
          font-weight: bold; 
        }
        .footer { 
          margin-top: 40px; 
          text-align: center; 
          color: #64748b; 
          font-size: 12px; 
        }
        .cost { 
          color: #059669; 
          font-weight: bold; 
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Construction Material Estimate</h1>
        <h2>Bill of Materials (BoM)</h2>
      </div>
      
      <div class="project-info">
        <div class="info-card">
          <h3>Project Details</h3>
          <p><strong>Project:</strong> ${escapeHtml(options.projectName)}</p>
          <p><strong>Location:</strong> ${escapeHtml(options.location || "N/A")}</p>
          <p><strong>Date:</strong> ${date}</p>
          <p><strong>Estimator:</strong> ${escapeHtml(options.estimatorName || "ConstructAI")}</p>
        </div>
        
        <div class="info-card">
          <h3>Specifications</h3>
          <p><strong>Volume:</strong> ${results.parameters.volumeM3} m³</p>
          <p><strong>Mix Ratio:</strong> ${formatted.parameters.mixRatio}</p>
          <p><strong>Dry Factor:</strong> ${formatted.parameters.dryFactor}</p>
          <p><strong>Wastage:</strong> ${formatted.parameters.wastageFactor}</p>
        </div>
      </div>
      
      <table>
        <thead>
          <tr>
            <th>Material</th>
            <th>Volume (m³)</th>
            <th>Mass (kg)</th>
            <th>Units</th>
            <th>Cost Estimate</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Portland Cement</td>
            <td>${results.cement.volume}</td>
            <td>${results.cement.mass.toLocaleString()}</td>
            <td>${results.cement.bags} bags (50kg)</td>
            <td class="cost">$${(results.cement.bags! * 10).toFixed(2)}</td>
          </tr>
          <tr>
            <td>Fine Sand</td>
            <td>${results.sand.volume}</td>
            <td>${results.sand.mass.toLocaleString()}</td>
            <td>${results.sand.tonnes} tonnes</td>
            <td class="cost">$${(results.sand.tonnes * 50).toFixed(2)}</td>
          </tr>
          <tr>
            <td>Coarse Aggregate</td>
            <td>${results.aggregate.volume}</td>
            <td>${results.aggregate.mass.toLocaleString()}</td>
            <td>${results.aggregate.tonnes} tonnes</td>
            <td class="cost">$${(results.aggregate.tonnes * 35).toFixed(2)}</td>
          </tr>
          <tr class="total-row">
            <td><strong>TOTAL</strong></td>
            <td><strong>${results.totals.volume}</strong></td>
            <td><strong>${results.totals.mass.toLocaleString()}</strong></td>
            <td><strong>Mixed Units</strong></td>
            <td class="cost"><strong>$${results.totals.estimatedCost.toFixed(2)}</strong></td>
          </tr>
        </tbody>
      </table>
      
      <div class="footer">
        <p>Generated by ConstructAI Material Estimator</p>
        <p>Report ID: EST-${Date.now()}</p>
        <p>This estimate is based on standard material densities and may vary with actual site conditions.</p>
      </div>
    </body>
    </html>
  `;
}

/**
 * Get appropriate filename for export based on type
 */
export function getExportFilename(
  projectName: string,
  type: 'csv' | 'pdf' | 'json',
  timestamp?: Date
): string {
  const date = timestamp || new Date();
  const dateStr = date.toISOString().split('T')[0]; // YYYY-MM-DD
  const sanitizedName = projectName.replace(/[^a-zA-Z0-9-_]/g, '_');
  return `${sanitizedName}_BoM_${dateStr}.${type}`;
}
